/*
 * 进程
 */
#def [text~]
====================
* 基本数据结构 {

	* 任务门描述符: 用户切换进程的数据结构
	[code] |<
	// TSS32数据结构
	typedef struct {
	    int backlink, esp0, ss0, esp1, ss1, esp2, ss2, cr3;
	    int eip, eflags, eax, ecx, edx, ebx, esp, ebp, esi, edi;
	    int es, cs, ss, ds, fs, gs;
	    int ldtr, iomap;
	} TSS32;
	>| [uncode]

	=> 任务门: 使用`描述符`来指向这块TSS32内存, 这个`描述符`称为[this]

	* 全局描述符: 
	[code] |<
	typedef struct {
	    short limit_low, base_low;
	    char base_mid, access_right;
	    char limit_high, base_high;
	} SEGMENT_DESCRIPTOR;

	// 填充描述符
	void set_segmdesc(SEGMENT_DESCRIPTOR *sd, unsigned int limit, int base, int ar);

	#define AR_TSS32 0x0089
	>| [uncode]

	=> 实现: 
	[code] |<
	void set_segmdesc(SEGMENT_DESCRIPTOR *sd, unsigned int limit, int base, int ar){
	    if (limit > 0xfffff) {
		ar |= 0x8000; /* G_bit = 1 */
		limit /= 0x1000;
	    }
	    sd->limit_low    = limit & 0xffff;
	    sd->base_low     = base & 0xffff;
	    sd->base_mid     = (base >> 16) & 0xff;
	    sd->access_right = ar & 0xff;
	    sd->limit_high   = ((limit >> 16) & 0x0f) | ((ar >> 8) & 0xf0);
	    sd->base_high    = (base >> 24) & 0xff;
	    return;
	}
	>| [uncode]

}

* 进程切换代码 {

	* 把当前进程的相关信息写入到`TSS数据结构`中: 
	[code] |<
	load_tr:
		LTR  [esp + 4]	; load_tr(int), 加载第几个描述符
		ret
	>| [uncode]

	* `kernel.asm`中添加`任务门`用于指向不同的TSS32结构: 
	[code] |<
	LABEL_GDT:
	....
	LABEL_DESC_6:       Descriptor        0,      0fffffh,       0409Ah
	LABEL_DESC_7:       Descriptor        0,      0,       0
	LABEL_DESC_8:       Descriptor        0,      0,       0
	LABEL_DESC_9:       Descriptor        0,      0,       0
	>| [uncode]

	* 定义两个不同的任务`tss_a`, `tss_b`: 
	[code] |<
	void CMain(void) {
		....
		static struct TSS32 tss_a, tss_b;
		struct SEGMENT_DESCRIPTOR *gdt = (struct SEGMENT_DESCRIPTOR *)get_addr_gdt();
		// tss_a
		tss_a.ldtr = 0;
		tss_a.iomap = 0x40000000;
		// tss_b
		tss_b.ldtr = 0;
		tss_b.iomap = 0x40000000;
		// 将 tss_a 的地址写入描述符
		int tssAoffset = 7;
		set_segmdesc(gdt + tssAoffset, 103, (int) &tss_a, AR_TSS32);
		set_segmdesc(gdt + 8, 103, (int) &tss_a, AR_TSS32);	// 描述符的属性是AR_TSS32 = 0x0089
									// 让CPU知道当前这个描述符是指向一个TSS32结构的
		
		// 将 tss_b 的地址写入描述符
		int tssBoffset = 9;
		set_segmdesc(gdt + tssBoffset, 103, (int) &tss_b, AR_TSS32);
		set_segmdesc(gdt + 6, 0xffff, task_b_main, 0x409a);

		// 把描述符LABEL_DESC_7通过ltr指令加载到CPU中
		load_tr(tssAoffset << 3);	// 左移空出3个比特位, 这3个位是有重要用处的

		// 进行一次任务切换(调度)
		taskswitch8();
		....
	}
	>| [uncode]

	=> CPU任务切换: 加载TSS描述符 
		-> 当前的各个寄存器的存储到通过ltr加载的`旧tss32结构`中
		-> 从`新加载的tss32结构`中读取相关信息, 进而执行新的任务

	* `kernel.asm`: "jump 全局描述符下标 << 3 : 偏移地址"
	[code] |<
	taskswitch8:
		jmp	8 << 3:0
		ret
	taskswitch7:
		jmp	7 << 3:0
		ret
	taskswitch6:
		jmp	6 << 3:0
		ret
	taskswitch9:
		jmp	9 << 3:0
		ret
	>| [uncode]

	* 验证自我切换: 把其他字段打印出来, 如果他们的值不再是0的话, 那就意味着曾经有任务切换过
	[code] |<
	SheetPrintf(intToHexStr(tss_a.eflags), mst, &bootInfo, &mouseinfoCursor);
	SheetPrintf(intToHexStr(tss_a.esp), mst, &bootInfo, &mouseinfoCursor);
	...
	>| [uncode]

	* 查看tr寄存器: `r tr`

}
====================
