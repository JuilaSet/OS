/*
 * 汇编基础
 */
#def [text~]
====================
* 汇编 {

	* 寄存器 {

		* AX: 累加寄存器 => AH AL

		* CX: 计数寄存器 => CH CL

		* DX: 数据寄存器 => DH DL

		* BX: 基址寄存器, 可指定地址 => BH BL

		* SP: 栈指针寄存器

		* BP: 基址寄存器, 可指定地址

		* SI: 原变址寄存器, 可指定地址

		* DI: 目的变址寄存器, 可指定地址

	}

	* 端寄存器 {

		* ES: 附加段寄存器(`extra`), 

		* CS: 代码段寄存器(`code`), 对应的数据相当于c语言中的代码语句

		* SS: 栈段寄存器(`stack`), 对应的数据相当于c语言中的局部变量

		* DS: 数据端寄存器(`data`), 对应的数据相当于c语言中的全局变量

		* FS: 没有名称

		* GS: 没有名称

	}

	=> 说明: 需要先mov到带有L和H功能的寄存器中, 之后才能取得SP-DI等寄存器的高低位
	[ex~]
	|| MOV AX, SP
	|| MOV ???, AL

	@refer [url |<https://blog.csdn.net/whatday/article/details/24851197>|]
	* 控制寄存器(CR0,CR1,CR2,CR3,CR4) {
	
		* CR0: 0位是保护允许位PE(Protedted Enable), 用于启动保护模式, 如果PE位置1, 则保护模式启动, 如果PE=0, 则在实模式下运行
	
	}

	* 标号: 会被翻译成数字
	[ex~]
	|| JMP entry
	|| ...
	|| entry: 

	* 指令 {

		* `MOV`: 赋值 {

			* `MOV BYTE/WORD/DWORD [addr/寄存器], num2`: num2存入内存的addr位置

		}

		* `INT`: 中断指令

		* `HLT`: 让CPU停止工作, 进入待机状态

		* `CLI`: 禁止中断发生

		* `STI`: 允许中断发生

		* `ORG`: 程序的起始地址
		|| ORG 0x7c00

		* JCC指令 {

			* `JNC`

			* `JBE`

			* jmp模式: `near`(调用程序和子程序在同一代码段中, 只改写eip), `far`(同时改写EIP和CS), `short`()

		}

		* `iretd`: 中断返回

		* 自增减 {

			* `inc`: 自加1 

			* `DEC`: 自减1

		}

		* db: 8位
		|| 00

		* dw: 16位
		|| 00 00

		* dd: 32位
		|| 00 00 00 00

	}

	* 宏 {

		* `$`: 表示当前的偏移量
		[ex~]
		|| 死循环: jmp $

		* `$$`: 表示当前节(section)的开始处的地址

	}

	* NASM中的伪指令 {

		* `[ORG xxxx]`: 程序的装载地址, 程序要从这个地址开始执行; 
			=> 注意: org不是用来装载程序的, 而是之后的地址会根据这个位置计算; 

		* `SECTION` {

			* `.data`, `.text`, `.bss`: 编译后地址顺序为`.text`, `.data`, 用户自定义section
			[ex~] [code] |<
			[SECTION .data]	// .data 块

			>| [uncode]

			* `[bits 16]`: 告诉编译器，编译成16位指令，前面代码缺省默认

			* 用户自定义`section`: 同名的section编译后会放在一段连续的内存上, 按照出现的先后顺序存储

		}

		* 定义变量: `变量标识符` `数据类型` `值`
		[ex~] 
		|| var dd 3

		* 需要另一个模块的函数: 
		[ex~]
		|| extern bar_func

		* 暴露一个变量: 
		[ex~]
		|| global _start

	}

}

* 使用vboxdbg {

	* 启动VirtualBOX的调试(dbg)界面 {

		* 进入virtual box的安装目录

		* 启动调试界面: 
		|| ./VirtualBox.exe --startvm "myos" --debug-command-line

	}

	* 命令 {

		* `r`: 所有寄存器的值

		* `dd`, `dq`: 查看内存内容

		* `ba`: 设置断点
		[ex~]
		|| # 在7c00处设置断点
		|| ba x 1 7c00

		* `u`: 显示程序

		* `t`: 执行一句

		* `g`: 继续执行

	}

}
====================
