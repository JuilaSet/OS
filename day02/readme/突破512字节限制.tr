/*
 * 突破512字节限制
 */
#def [text~]
====================
* 问题: 当前内核只能放置在第一个扇区位置处, 不能超出

* 解决 {

	* 制作一个内核加载器, 将其放入到第一扇区, 可以缩小到512字节之内

	* 加载器加载如内存后, 加载器会将OS内核从软盘加载到系统内存

	* CPU跳转到内核的加载地址

}

* `加载器`代码: `boot.asm`
[ex~] 
	[code] |<
	org	0x7c00;

LOAD_ADDR  EQU  0X8000		; 宏

entry:
	mov	AX, 0
	mov	SS, AX
	mov	DS, AX
	mov	ES, AX
	mov	SI, AX

readFloppy:
	; 加载扇区2, 柱面1, 磁头0
	mov	CH, 1		; 柱面号1
	mov	DH, 0		; 磁头号0
	mov	CL, 2		; 扇区号2

	mov	BX, LOAD_ADDR	; ES:BX 数据存储缓冲区, ES * 0x10 + BX, 从0X8000读取

	mov	AH, 0x02	; AH = 02 表示要做的是读盘操作
	mov	AL, 1		; AL 表示要练习读取几个扇区
	mov	DL, 0		; 驱动器编号
	INT	0x13		; 调用BIOS中断实现磁盘读取功能

	JC	fin
	jmp	LOAD_ADDR

fin:
	HLT
	jmp  fin
	>| [uncode]

* `内核`代码: `kernel.asm`
[ex~] 
	[code] |<
; 会被加载到物理内存的8000处
org	0x8000

entry:
	mov	ax, 0
	mov	ss, ax
	mov	ds, ax
	mov	es, ax
	mov	si, msg


putloop:
	mov	al, [si]
	add	si, 1
	cmp	al, 0
	je	fin
	mov	ah, 0x0e
	mov	bx, 15
	int	0x10
	jmp	putloop

fin:
	HLT
	jmp	fin

; 作为内核代码的一部分加载到内存中去的
msg:
	DB	"This is Hello World from kernel"
	>| [uncode]

* 编译: 
[ex~]
|| nasm kernel.asm -o kernel.img
|| nasm boot.asm -o boot.img

* 通过C++代码写成`system.img`
====================
