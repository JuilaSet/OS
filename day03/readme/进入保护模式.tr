/*
 * 进入保护模式
 */
#def [text~]
====================
* 保护模式 {

	* 如何获得超过1M以上的内存地址 {

		* 实模式是16位系统, 进入保护模式后才能使用32位寻址

		* 使用连续的8个字节组成的结构体实现 {

			* 结构体定义: 
			[dgrm] |<
			|| byte0: [00]
			|| byte1: [00]
			|| 	byte2: 00 ;
			|| 	byte3: 00 ;
			|| 	byte4: 00 ;
			|| 			byte5: 00 
			|| byte6: [0]0
			|| 	byte7: 00 ;
			>| [undgrm]

			=> 说明 {

				* `[]`: 表示20bit的数据

				* `;`: 表示32的地址

			}

		}

		* Descriptor(描述符)声明: 
		[ex~] [code] |<
		%macro Descriptor 3	; %n 表示引用第n个参数, 3 表示3个参数
			; %2 的高 0x00 00 字节放入byte0
			dw	%2  &  0FFFFh

			; 将内存地址的头三个字节放入到`byte2`, `byte3`, `byte4` 
			dw	%1  &  0FFFFh		; %1的低 0x00 00 00 00 位放入byte2, byte3
			db	(%1 >> 16) & 0FFh	; %1的高 0x00 00 位放入byte4

			; (%2 >> 8) & 0F00h) 表示byte6的头4个字节存放%2的 0xF0 00 bit(F标志的位写入)
			dw	((%2 >> 8) & 0F00h) | (%3 & 0F0FFh)

			; 将内存长度的第4个字节放入 byte7
			db	(%1 >> 24) & 0FFh
		%endmacro
		>| [uncode]

	}

	* 设置代码的优先级 {

		* 功能: `保护功能`, 不同的代码拥有不同的优先级, 优先级高的能够执行特殊指令, 优先级低的, 某些重要指令就无法执行

	}

}
====================
