/*
 * 准备结合C语言内核开发
 */
#def [text~]
====================
* 过程 {

	* 从`foo.asm`中的`_start`开始执行

	* `_start`中调用一个函数叫`bar_func`, 由`bar.c`模块实现

	* `bar_func`中调用`foo_print`, 由`foo.asm`实现
	[dgrm] |<
	foo.asm   |    bar.c
	__________|____________
	_start ======> 
	               bar_func
	foo_print <=== 
	>| [undgrm]

}

* 开始编译: 生成`elf`格式的文件 {

	* 编译`foo.asm`: 
	[ex~]
	|| nasm -f elf32 -o foo.o foo.asm

	* 编译`bar.c`: 
	[ex~]
	|| gcc -m32 -c -o bar.o bar.c

	* 模块连接: 
	[ex~]
	|| ld -m elf_i386 -o foobar foo.o bar.o

}

[def num 0;]
* 通过反汇编的方式的到连接后的文件 {

	* [echo num++;]: 生成不带有符号标记的`.o`文件: `-fno-asynchronous-unwind-tables `, 便于之后的反汇编
	[ex~]
	|| gcc -m32 -fno-asynchronous-unwind-tables -s -c -o bar.o bar.c

	* [echo num++;]: 编译: 
	[ex~]
	|| cd objconv
	|| g++ -o objconv -O2 src/*cpp

	* [echo num++;]: 绑定命令`objconv`: 在bin目录下建立软连接

	* [echo num++;]: 生成`bar.asm`反汇编文件: 
	|| objconv -fnasm bar.o -o bar.asm

	* [echo num++;]: 将`foo.asm`里面的_start, 修改成main

	* [echo num++;]: 在`foo.asm`末尾添加`%include "bar.asm" `将第 [* 4] 步反汇编的C模块代码引入`foo.asm`

	* [echo num++;]: 去掉所有的`extern`指令, 和不执行的部分

	* [echo num++;]: 生成`foo.asm`二进制文件
	|| nasm -f elf32 foo.asm

	* [echo num++;]: 编译`foo`必须带有32位库
	|| gcc -m32 foo.o -o foo

}
====================
