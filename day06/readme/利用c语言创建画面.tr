/*
 * 利用c语言创建画面模式
 */
#def [text~]
====================
* 转入图形模式: 打开VGA接口
[ex~] [code] |<
mov  al, 0x13h	; 设置显卡的色彩模式
mov  ah, 0x00
int  0x10
>| [uncode]

/home/luo/workspace/OSsy/objconv


* `al`模式 {

	* 0x03: 16色字符模式

	* 0x12: VGA图形模式, 640 * 480 * 4位彩色模式, 独特的4面存储模式

	* 0x13: VGA图形模式, 320 * 200 * 8位彩色模式, 调色板模式

	* 0x6a: 扩展VGA图形模式, 800 * 600 * 4彩色模式

}

* 如何显示 {

	* 系统显存的地址: `0x000a0000`

	* 望显存地址写入数据, 屏幕就会出现相应的变化

	* 给c语言分配一个512字节的栈区大小

	* 使用C语言写入图像

	* 最后生成虚拟软盘并放入系统中去执行 {

		* 由于生成得到的kernel大于512字节, 因此要读取两个扇区: 
		[ex~]
		|| boot.asm: 
		|| ....
		|| mov	AL, 2	; 连续读取两个扇区

	}

}

* 构建 {

	* 将c文件编译成二进制文件: 
	|| gcc -m32 -fno-asynchronous-unwind-tables -s -c -o write_vga.o write_vga.cpp

	* 反编译: 
	|| objconv -fnasm write_vga.asm write_vga.o

	* 反汇编中的代码去掉开头的两句: 
	[code] |<
	global CMain: function
	extern io_hlt
	>| [uncode]

}
====================
